angular.module("ngVimeo", ["ngVimeo.player"]), angular.module("ngVimeo.player", []).constant("playerBaseURI", "https://player.vimeo.com/video/").constant("originExpression", /^https?:\/\/player.vimeo.com/).constant("PLAYER_PARAMS", {
  API: "api",
  AUTO_PAUSE: "autopause",
  AUTO_PLAY: "autoplay",
  BADGE: "badge",
  BYLINE: "byline",
  COLOR: "color",
  LOOP: "loop",
  PLAYER_ID: "player_id",
  PORTRAIT: "portrait",
  TITLE: "title"
}).constant("PLAYER_EVENTS", {
  READY: "ready",
  LOAD_PROGRESS: "loadProgress",
  PLAY_PROGRESS: "playProgress",
  PLAY: "play",
  PAUSE: "pause",
  FINISH: "finish",
  SEEK: "seek"
}).constant("generateIdPrefix", "VimeoPlayer").config(["$sceDelegateProvider", "playerBaseURI", function (a, b) {
  a.resourceUrlWhitelist([b + "**"])
}]).factory("playerService", ["$window", "originExpression", "PLAYER_EVENTS", "generateIdPrefix", function (a, b, c, d) {
  var e = {}, f = 0, g = function () {
    return f += 1, d + f
  }, h = function (a) {
    e[a.playerId] = a
  }, i = "*", j = function (a) {
    a.postMessage(JSON.stringify({
      method: "addEventListener",
      value: c.PLAY
    }), i), a.postMessage(JSON.stringify({
      method: "addEventListener",
      value: c.PAUSE
    }), i), a.postMessage(JSON.stringify({
      method: "addEventListener",
      value: c.LOAD_PROGRESS
    }), i), a.postMessage(JSON.stringify({
      method: "addEventListener",
      value: c.PLAY_PROGRESS
    }), i)
  }, k = function (a) {
    if (!b.test(a.origin))return !1;
    "*" === i && (i = a.origin);
    var d = JSON.parse(a.data), f = e[d.player_id];
    switch (d.event) {
      case c.READY:
        j(f.contentWindow), f.isReady = !0;
        break;
      case c.PLAY:
        f.isPlaying = !0;
        break;
      case c.PAUSE:
        f.isPlaying = !1;
        break;
      case c.LOAD_PROGRESS:
        f.secondsLoaded = d.data.seconds, f.secondsTotal = d.data.duration;
        break;
      case c.PLAY_PROGRESS:
        f.seconds = d.data.seconds;
        break;
      case c.FINISH:
        f.isFinished = !0
    }
    f.$apply()
  };
  return angular.element(a).on("message", k), {
    generatePlayerId: g,
    registerPlayer: h
  }
}]).directive("vimeoPlayer", ["playerService", "playerBaseURI", "PLAYER_PARAMS", function (a, b, c) {
  return {
    restrict: "E",
    scope: {
      autoPause: "@?",
      autoPlay: "@?",
      color: "@?",
      height: "@",
      isFinished: "=",
      isPlaying: "=",
      isReady: "=",
      loop: "@?",
      playerId: "@?",
      videoId: "@",
      seconds: "=",
      secondsLoaded: "=",
      secondsTotal: "=",
      showBadge: "@?",
      showByline: "@?",
      showPortrait: "@?",
      showTitle: "@?",
      width: "@"
    },
    template: '<iframe ng-src="{{embedUri}}" width="{{width}}" height="{{height}}" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>',
    link: function (d, e) {
      var f = [];
      f.push(c.API + "=1"), angular.isDefined(d.playerId) || (d.playerId = a.generatePlayerId()), f.push(c.PLAYER_ID + "=" + d.playerId), angular.isDefined(d.autoPause) && f.push(c.AUTO_PAUSE + "=" + d.autoPause), angular.isDefined(d.autoPlay) && f.push(c.AUTO_PLAY + "=" + d.autoPlay), angular.isDefined(d.showBadge) && f.push(c.BADGE + "=" + d.showBadge), angular.isDefined(d.showByline) && f.push(c.BYLINE + "=" + d.showByline), angular.isDefined(d.color) && f.push(c.COLOR + "=" + d.color), angular.isDefined(d.color) && f.push(c.COLOR + "=" + d.color), angular.isDefined(d.loop) && f.push(c.LOOP + "=" + d.loop), angular.isDefined(d.loop) && f.push(c.LOOP + "=" + d.loop), angular.isDefined(d.showPortrait) && f.push(c.PORTRAIT + "=" + d.showPortrait), angular.isDefined(d.showTitle) && f.push(c.PORTRAIT + "=" + d.showTitle), d.embedUri = b + d.videoId + "?" + f.join("&"), d.isReady = !1, d.isPlaying = !1, d.isFinished = !1, d.seconds = 0, d.secondsLoaded = 0, d.secondsTotal = 0, d.contentWindow = e.children()[0].contentWindow, a.registerPlayer(d), e.on("$destroy", function () {
      })
    }
  }
}]);
//# sourceMappingURL=ngVimeo.min.js.map
